def solution(game_board, table):
    answer = -1
    return answer


"""
game_board

형상을 [0,0,1] 등의 2차원 배열로 가지게 하려면 구현이 너무 복잡
차라리 0에 해당하는 좌표값들만 1차원 배열로 구성한 뒤, 이를 기반으로 table 형상과 비교하는게 나을듯

blank = [
            [[0,0,1],[1,0,1],[1,0,0]], -> [(0,2), (0,3), (1,3), (2,3), (2,4)] 형식으로 좌표값 가지기
            [[0],[0]], -> [(0,5), (1,5)]
            [[0,0],[0,1]], -> [(1,0), (1,1), (2,0)]
            [[1,0,1],[0,0,0]], -> [(3,2), (4,1), (4,2), (4,3)]
            [[0]], -> [(5,0)]
            [[1,0],[0,0]] -> [(4,5), (5,4), (5,5)]
        ]

table  
puzzle = [
            [[1],[1]],
            [[1,1,0],[0,1,0],[0,1,1]],
            [[0,1,0],[1,1,0],[0,1,0]],
            [[1,1]],
            [[1,1],[0,1]]
        ]
        
위와 같은 리스트를 구한 뒤 (0,0) 기준으로 퍼즐 회전을 구현하여 서로 같은 지 매칭

리스트를 구하기 위해선 리스트를 탐색하다 0을 만났을 때, 해당 0을 기준으로 dfs/bfs 형식으로 퍼즐 형상을 구해야 함.
"""

print(solution([[1,1,0,0,1,0],[0,0,1,0,1,0],[0,1,1,0,0,1],[1,1,0,1,1,1],[1,0,0,0,1,0],[0,1,1,1,0,0]],
               [[1,0,0,1,1,0],[1,0,1,0,1,0],[0,1,1,0,1,1],[0,0,1,0,0,0],[1,1,0,1,1,0],[0,1,0,0,0,0]])) # 14
